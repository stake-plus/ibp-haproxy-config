global
  log 127.0.0.1 local0 info
  chroot /opt/haproxy-3.0.2/chroot
  pidfile /var/run/haproxy.pid
  maxconn 1000000
  user  haproxy
  group haproxy
  daemon
  nbthread 8
  cpu-map auto:1/1-8 0-7
  server-state-base /opt/haproxy-3.0.2/etc/state/
  tune.bufsize 1048576
  tune.rcvbuf.client 262144
  tune.rcvbuf.server 262144
  tune.sndbuf.client 262144
  tune.sndbuf.server 262144
  tune.ssl.cachesize 1048576
  tune.ssl.lifetime 604800
  tune.ssl.default-dh-param 4096
  tune.ssl.ssl-ctx-cache-size 1000000
  ssl-default-bind-options no-sslv3
  ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-GCM-SHA384
  ssl-default-server-options no-sslv3
  ssl-default-server-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-GCM-SHA384
  stats socket /var/run/haproxy.sock mode 600 level admin
  stats timeout 2m
  maxcompcpuusage 50
  tune.zlib.memlevel 9
  tune.zlib.windowsize 10
  httpclient.resolvers.disabled on
  httpclient.resolvers.prefer ipv4

defaults
  log global
  timeout connect 5s
  timeout client 30s
  timeout client-fin 30s
  timeout server 30s
  timeout queue 25s
  timeout tunnel  1h
  retries 3
  option http-no-delay
  option http-keep-alive
  option tcpka

###
# Stats
###

frontend stats
  mode http
  bind *:8404
  stats enable
  stats uri /stats
  stats refresh 10s

###
# Prometheus Frontend configuration 
###

frontend prometheus-frontend
  bind *:9090 ssl crt /opt/haproxy-3.0.2/etc/ssl alpn h2,http/1.1 tfo
  mode http

  option httplog
  no option http-buffer-request

  compression algo gzip deflate 
  compression type text/html text/plain text/css application/javascript application/json
  compression direction response

  use_backend prometheus

###
# HTTP Frontend configuration 
###

frontend http-frontend
  bind *:80 alpn h2,http/1.1 tfo
  mode http

  option httplog
  no option http-buffer-request

  compression algo gzip deflate 
  compression type text/html text/plain text/css application/javascript application/json
  compression direction response

  acl is_http ssl_fc
  acl letsencrypt-acl path_beg -i /.well-known/acme-challenge/
  acl snapshots-acl path_beg -i /snapshots/
  http-request redirect scheme https if !is_http !letsencrypt-acl !snapshots-acl
  use_backend letsencrypt if letsencrypt-acl || snapshots-acl
  default_backend letsencrypt

###
# SSL Frontend configuration
###

frontend ssl-frontend
  bind *:443 ssl crt /opt/haproxy-3.0.2/etc/ssl alpn h2,http/1.1 tfo
  bind *:8080 alpn h2,http/1.1 tfo
  mode http

  option httplog
  no option http-buffer-request

  compression algo gzip deflate 
  compression type text/html text/plain text/css application/javascript application/json
  compression direction response

  # Capture Referer and User-Agent headers
  http-request capture req.hdr(Referer) len 128
  http-request capture req.hdr(User-Agent) len 256
  capture request  header Host len 20

  # Apache-style log format
  log-format %si:%sp\ %ci\ %HQ\ "%r"\ %ST\ %B\ "%hr;"

  # Web Monitor
  acl monitor hdr(host) -i monitor.dotters.network
  use_backend monitor if monitor

  # Prometheus
  acl prometheus hdr(host) -i prometheus.stake.plus
  use_backend prometheus if prometheus

  # Use backend based on path map
  acl path_match path,map_beg(/opt/haproxy-3.0.2/etc/service_path_map.txt) -m found
  use_backend %[path,map_beg(/opt/haproxy-3.0.2/etc/service_path_map.txt)] if path_match

  # Use backend based on full domain map
  acl domain_match req.hdr(host),lower,map(/opt/haproxy-3.0.2/etc/service_dns_map.txt) -m found
  use_backend %[req.hdr(host),lower,map(/opt/haproxy-3.0.2/etc/service_dns_map.txt)] if domain_match

  # Default backend
  default_backend letsencrypt


###
# TCP (P2P&P2P/WSS) Frontend configuration
###

frontend p2p-frontend
  bind *:30332 ssl crt /opt/haproxy-3.0.2/etc/ssl alpn h2,http/1.1 tfo
  bind *:30334 ssl crt /opt/haproxy-3.0.2/etc/ssl alpn h2,http/1.1 tfo
  bind *:31332 ssl crt /opt/haproxy-3.0.2/etc/ssl alpn h2,http/1.1 tfo
  bind *:31334 ssl crt /opt/haproxy-3.0.2/etc/ssl alpn h2,http/1.1 tfo
  mode http

  option httplog
  no option http-buffer-request

  compression algo gzip deflate 
  compression type text/html text/plain text/css application/javascript application/json
  compression direction response

  # Log format to include SNI
  log-format "%ci:%cp [%t] %ft %b/%s %Tw/%Tc/%Tt %ST %B %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs ssl_sni=%[ssl_fc_sni]"

  # Programmatically set the backend based on port and base backend name using SNI directly
  acl wsp2p_1_para dst_port 30332
  acl wsp2p_1_relay dst_port 30334
  acl wsp2p_2_para dst_port 31332
  acl wsp2p_2_relay dst_port 31334

  use_backend %[ssl_fc_sni,lower,map(/opt/haproxy-3.0.2/etc/service_wsp2p_map.txt,-),concat(-wsp2p-para-1)] if wsp2p_1_para
  use_backend %[ssl_fc_sni,lower,map(/opt/haproxy-3.0.2/etc/service_wsp2p_map.txt,-),concat(-wsp2p-relay-1)] if wsp2p_1_relay
  use_backend %[ssl_fc_sni,lower,map(/opt/haproxy-3.0.2/etc/service_wsp2p_map.txt,-),concat(-wsp2p-para-2)] if wsp2p_2_para
  use_backend %[ssl_fc_sni,lower,map(/opt/haproxy-3.0.2/etc/service_wsp2p_map.txt,-),concat(-wsp2p-relay-2)] if wsp2p_2_relay


###
# MISC Backend Configurations
###

backend letsencrypt
  mode http
  http-reuse safe
  balance leastconn
  server letsencrypt 10.50.120.10:80 check inter 2s maxconn 200

backend monitor
  mode http
  http-reuse safe
  balance leastconn
  server monitor 10.50.120.12:81 check inter 2s maxconn 200

backend prometheus  
  mode http
  http-reuse safe
  balance leastconn   
  server prom-1 10.50.120.11:9090 check inter 2s maxconn 100

backend paseo-test-backend
  mode http
  http-reuse safe
  balance leastconn
  server paseo-test-rpc-1 10.50.118.10:10000 check inter 2s maxconn 500
  server paseo-test-rpc-2 10.50.118.11:10000 check inter 2s maxconn 500

backend paseo-test-ah-backend
  mode http
  http-reuse safe
  balance leastconn
  server paseo-test-ah-rpc-1 10.50.118.12:10000 check inter 2s maxconn 500

